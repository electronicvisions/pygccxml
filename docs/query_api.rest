===============================
pygccxml.declarations query API
===============================

.. contents:: Table of contents

------------
Introduction
------------
You parsed the source files. Now you have to do some real work with the extracted
information, right? `pygccxml`_ provides very powerful and simple interface to
query about extracted declrations.

Just an example. I want to select all member functions, that have 2 arguments.
I don't care about first argument type, but I do want second argument type to be
a reference to an integer. More over, I want those functions names to end with
"impl" string and they should be protected or private.
::

  #global_ns is the reference to an instance of namespace_t object, that
  #represents global namespace
  query = declarations.custom_matcher_t( lambda mem_fun: mem_fun.name.endswith( 'impl' )
  query = query & ~declarations.access_type_matcher_t( 'public' )
  global_ns.member_functions( function=query, arg_types=[None, 'int &'] )

As for me the example I gave was too complex. In many cases you will find your
self looking for one or many declarations using one or two properties of that
declaration(s). For example:
::

  global_ns.namespaces( 'details' )

This call will return all namespaces that have 'details' namespace.

------------------
How does it works?
------------------

As you already know, ``pygccxml.declarations`` packages defines next classes:

* ``scopedef_t`` - base class for all classes, that can contain other declarations

* ``namespace_t`` - derives from ``scopedef_t`` class, represents C++ namespace

* ``class_t`` - derives from ``scopedef_t`` class, represents C++ class/struct.

``scopedef_t`` class defines query interface. Basicaly you can ask it about any
declaration it contains, even about some sub declarations.




.. _`pygccxml`: ./pygccxml.html
.. _`SourceForge`: http://sourceforge.net/index.php
.. _`Python`: http://www.python.org
.. _`GCC-XML`: http://www.gccxml.org
.. _`UML diagram` : ./declarations_uml.png
.. _`parser package UML diagram` : ./parser_uml.png
.. _`ReleaseForge` : http://releaseforge.sourceforge.net
.. _`boost::type_traits` : http://www.boost.org/libs/type_traits/index.html
..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   End: